import React, { useEffect, useState } from "react"
import { View, Text, StyleSheet, Alert, Pressable } from "react-native"

import supabase from "../../lib/initSupabase"
import Spinner from "react-native-loading-spinner-overlay"
import CustomButton from "../../components/CustomButton/CustomButton"

// TODO: checkUserSubscriptions. Add check: services_id. Check both sub and service limiting database update.
// TODO: add boolean with checkbox to updateSubscription to check for available user discounts
// TODO: Add calendar for start_date and discount. And function to check duration for each invoice and discount.
// TODO: Move most of the code to ProductEditScreen which will be available through ProductViewScreen
// TODO: Create ProductViewScreen. Display Service image, name, active subscription, payment details and navigation.

const ProductScreen = ({ route }) => {
  const { name, serviceId } = route.params
  const [loading, setLoading] = useState(false)
  const [userId, setUserId] = useState([])
  const [fetchedSubscriptions, setFetchedSubscriptions] = useState("")
  const [selectedSubscriptionId, setSelectedSubscriptionId] = useState("")
  const [confirmSubscriptionId, setConfirmSubscriptionId] = useState(true) // Check if user already subscribe on selected service sub
  const currentDate = new Date()
  const formattedDate = `${currentDate.getFullYear()}/${
    currentDate.getMonth() + 1
  }/${currentDate.getDate()}`
  const initialSubscription = {
    users_id: "",
    subscriptions_id: "",
    start_date: formattedDate, // If no start date is given todays date is set YYYY/MM/DD
    discount_active: false,
    services_id: "",
  }
  const [newSubscription, setNewSubscription] = useState(initialSubscription)

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser()
      setUserId(user.id)
    }
    fetchSubscriptions(serviceId)
    fetchUser()
    setConfirmSubscriptionId(true)
  }, [serviceId])

  // Check if user already subscribe on selected service subscription
  useEffect(() => {
    if (selectedSubscriptionId != "") {
      checkUserSubscriptions(userId, selectedSubscriptionId)
    }
  }, [selectedSubscriptionId])

  // Fetch matching Subscriptions from Supabase
  const fetchSubscriptions = async (serviceId) => {
    const { data: subscriptions, error } = await supabase
      .from("subscriptions")
      .select("id, name, price")
      .eq("services_id", serviceId)
    if (subscriptions) setFetchedSubscriptions(subscriptions)
    if (error) Alert.alert(error.message)
  }

  // Update initial subscriptions object
  // FIXME: Boolean: discounts and Date: Calendar
  const updateSubscription = async (userId, subscriptionId, serviceId) => {
    // const updatedSubscription = {
    //   ...initialSubscription,
    //   users_id: userId,
    //   subscriptions_id: subscriptionId,
    //   services_id: serviceId,
    // }
    // if (
    //   updatedSubscription.users_id == "" ||
    //   updatedSubscription.users_id == null ||
    //   updatedSubscription.subscriptions_id == "" ||
    //   updatedSubscription.subscriptions_id == null ||
    //   updatedSubscription.services_id == "" ||
    //   updatedSubscription.services_id == null
    // ) {
    //   Alert.alert("Error: Updated subscription keys cannot be empty or null.")
    //   console.error("Error: Updated subscription keys cannot be empty or null.")
    // } else {
    //   setNewSubscription(updatedSubscription)
    // }

    // Generated by cursor ai
    const updatedSubscription = {
      ...initialSubscription,
      users_id: userId,
      subscriptions_id: subscriptionId,
      services_id: serviceId,
    }
    const isEmptyOrNull = Object.values(updatedSubscription).some(
      (value) => value === "" || value === null,
    )
    if (isEmptyOrNull) {
      const error = "Error: Updated subscription keys cannot be empty or null."
      Alert.alert(error)
      console.error(error)
    } else {
      setNewSubscription(updatedSubscription)
    }
  }

  // FIXME: service_id check
  const checkUserSubscriptions = async (userId, selectedSubId) => {
    const { data: subscriptions_id, error } = await supabase
      .from("users_subscriptions")
      .select("subscriptions_id")
      .eq("users_id", userId)
      .eq("subscriptions_id", selectedSubId)
    if (subscriptions_id && subscriptions_id.length === 0) {
      setConfirmSubscriptionId(true)
    } else {
      // console.error("Du har redan denna tjänst!")
      setSelectedSubscriptionId("")
      setConfirmSubscriptionId(false)
    }
    if (error) console.error(error)
  }

  // Add the updated subscription object to users_subscriptions on Supabase
  const addUserSubscription = async (subscription) => {
    setLoading(true)
    const { data, error } = await supabase
      .from("users_subscriptions")
      .insert([subscription])
    if (!error) console.log("Successfully updated!")
    if (!error)
      setTimeout(() => {
        navigation.navigate("ProductScreen")
      }, 2000)
    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  return (
    <>
      <Text style={styles.heading}>{name}</Text>

      {fetchedSubscriptions &&
        fetchedSubscriptions.map((sub, index) => (
          <Pressable
            key={index}
            onPress={() => setSelectedSubscriptionId(sub.id)}>
            <Text>
              {sub.name} {sub.price}kr
            </Text>
          </Pressable>
        ))}

      <CustomButton
        text="Update Subscription"
        onPress={() =>
          updateSubscription(userId, selectedSubscriptionId, serviceId)
        }
      />

      <CustomButton
        text={
          confirmSubscriptionId
            ? "Lägg till tjänst"
            : "Tjänsten är redan aktiv!"
        }
        onPress={() => {
          confirmSubscriptionId
            ? addUserSubscription(newSubscription)
            : console.error("Denna tjänst är redan aktiv!")
        }}
        btnType={confirmSubscriptionId ? "PRIMARY" : "ERROR"}
        textType={confirmSubscriptionId ? "PRIMARY" : "ERROR"}
      />
      <View>
        <Spinner visible={loading} />
      </View>
    </>
  )
}

const styles = StyleSheet.create({
  root: {
    display: "flex",
    flexDirection: "column",
    rowGap: 8,
    flex: 1,
    // alignItems: "start",
    // padding: 20,
    backgroundColor: "#3693CF",
  },
  heading: {
    // flex: 1,
    // display: "flex",
    textAlign: "center",
    fontSize: 50,
    textTransform: "capitalize",
  },
  serviceScroll: {
    marginLeft: 16,
    width: "100%",
    flexGrow: 0,
  },
})

export default ProductScreen
